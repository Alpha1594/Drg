using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

namespace RegimeDatabaseCalculatorSystem
{
    public partial class Regime : Form
    {
#region Initialisation
        public Regime()     //Generates Form; Populates List.
        {
            InitializeComponent();
            LoadPatientList();
            ValueSelector Demo = new ValueSelector("D");
            Demo.Show();
        }        

        public struct PatientDataRecords //Defines patient atributes
        {
            public string Name;
            public string PatientNumber;
            public string Consultant;
            //public List<string> Diagnosis;
            public string Allergies;
            //public List<string> Prescription;
            public DateTime DOB;
            public DateTime LastDose;
            public DateTime NextDose;
            public byte DoseSchedule;
            public byte CurrentTreatment;
            public byte NoOfTreatments;
            public List<DateTime> LastUpdate;
            public decimal Height;
            public int Weight;
            public int SCreatinine;
            public string Gender;
            public PatientDataRecords(string Name, string PatientNumber, string Consultant, string Allergies, DateTime DOB, DateTime LastDose, DateTime NextDose, byte DoseSchedule, byte CurrentTreatment, byte NoOfTreatments, List<DateTime> LastUpdate, decimal Height, int Weight, int SCreatinine, string Gender)
            //List<string> Diagnosis,  List<string> Prescription,
            {
                this.Name = Name;
                this.PatientNumber = PatientNumber;
                this.Consultant = Consultant;
                //this.Diagnosis = Diagnosis;
                this.Allergies = Allergies;
                //this.Prescription = Prescription;
                this.DOB = DOB;
                this.LastDose = LastDose;
                this.NextDose = NextDose;
                this.DoseSchedule = DoseSchedule;
                this.CurrentTreatment = CurrentTreatment;
                this.NoOfTreatments = NoOfTreatments;
                this.LastUpdate = LastUpdate;
                this.Height = Height;
                this.Weight = Weight;
                this.SCreatinine = SCreatinine;
                this.Gender = Gender;
            }
        }
        public static List<PatientDataRecords> Patients = new List<PatientDataRecords>();       //Patient List (All)
        
        public struct PatientList
        {
            public string Name;
            public string PatientNumber;
            public int index;
            public PatientList(string Name, string PatientNumber, int index)
            {
                this.Name = Name;
                this.PatientNumber = PatientNumber;
                this.index = index;
            }
        }       
        public static List<PatientList> SubPatients = new List<PatientList>();    //Filtered List
#endregion

        public struct RegimeInfo
        {
            public string Name;
            public string Desc;
            //Drugs/Dose
            public string Administration;
            public string DoseSchedule;
            //Toxicities
            public string AntiEmetics;
            public string Extravasation;
            // RegInvestigations
            public string Comments; //?Str array/list
            public RegimeInfo(string Name, string Desc, string Administration, string DoseSchedule, string AntiEmetics, string Extravasation, string Comments)
            {
                string Name, string Desc, string Administration, string DoseSchedule, string AntiEmetics, string Extravasation, string Comments
            }

        }

        public void ReadData()      //Populates Patient List
        {
            XmlSerializer XSR = new XmlSerializer(typeof(List<PatientDataRecords>));
            if (File.Exists("PatientRecords.xml"))
            {
                FileStream XFile = new FileStream("PatientRecords.xml", FileMode.Open);
                if ( XFile.Length > 0 )
                {
                    Patients = (List<PatientDataRecords>) XSR.Deserialize(XFile);
                }
                XFile.Close();
            }
            else
            {
                FileStream XFile = new FileStream("PatientRecords.xml", FileMode.CreateNew);
                XFile.Close();
            }
        }
        
#region Load/Search PatientList
        public void LoadPatientList()
        {
            listPatients.Items.Clear();
            ReadData();
            int count = 0;
            foreach ( PatientDataRecords X in Patients )
            {
                PatientList append = new PatientList();
                append.Name = X.Name;
                append.PatientNumber = X.PatientNumber;
                append.index = count;
                SubPatients.Add(append);
                listPatients.Items.Add(append.Name);
                count++;
            }
            if ( tbSearchName.Text.Length != 0 )
            {
                string SearchTerm = tbSearchName.Text;  //RegEx Query
                listPatients.Items.Clear(); //Clears FormList
                SubPatients.Clear();
                int Count = 0;
                foreach ( PatientDataRecords P in Patients ) //Populates SubPatients with terms that match the Query
                {
                    if ( System.Text.RegularExpressions.Regex.IsMatch(P.Name, SearchTerm, System.Text.RegularExpressions.RegexOptions.IgnoreCase) )
                    {
                        PatientList append = new PatientList();
                        append.Name = P.Name;
                        append.PatientNumber = P.PatientNumber;
                        append.index = Count;
                        SubPatients.Add(append);
                        listPatients.Items.Add(append.Name);
                        //Count++; 
                    }
                    Count++;
                }
            }
        }

    #region EventHandlers for LoadPatientList();
            private void btnSearch_Click_1(object sender, EventArgs e)
                //Refreshes PatientList & Shows searched patients when btnSearch Pressed
            {
                LoadPatientList();
            }

            private void tbSearchName_TextChanged_1(object sender, EventArgs e)
                //Refreshes PatientList & Shows searched patients when Search tb content changed
            {
                LoadPatientList();
            }

            private void Regime_Activated(object sender, EventArgs e)
                //Refreshes PatientList & Shows searched patients when form activated
            {
                LoadPatientList();
            }
    #endregion
#endregion

#region Form PatientData Callers
        private void btnNP_Click(object sender, EventArgs e) //Opens Form to enter data for a new patient 
        {
            PatientData pData = new PatientData(true,tbSearchName.Text);
            pData.Show();
        }

#region ExistingPatient
        private void ExistingPatient() //Opens form to update the patients records
        {
            int ChosenPatient = SubPatients[listPatients.SelectedIndex].index;
            PatientData pData = new PatientData(false, ChosenPatient.ToString());
            pData.Show();
        }


        #region EventHandlers for ExistingPatient();
        private void btnSubmit_Click(object sender, EventArgs e) //ExistingPatient btnSubmit
        {
            ExistingPatient();
        }

        private void listPatients_DoubleClick(object sender, EventArgs e) //ExistingPatient Doubleclick on list
        {
            ExistingPatient();
        }
        
        private void listPatients_KeyPress(object sender, KeyPressEventArgs e)
        {
            ExistingPatient();
        }
        #endregion
#endregion  
#endregion

#region Menu
        private void bSAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Calculators calcBSA = new Calculators(0);
            calcBSA.Show();
        }

        private void renalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Calculators calcCCR = new Calculators(1);
            calcCCR.Show();
        }

        private void calvertToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Calculators calcCalvert = new Calculators(2);
            calcCalvert.Show();
        }
#endregion  
    }
}
